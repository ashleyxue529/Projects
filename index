<!doctype html>
<html><head><title>Practicing Chess Endgames</title></head>
<!--
Todo list:
3)  Remember the position via cookies
4)  React when the user makes a move
5)  If a user manually sets a new position, validate it
6)  Determine the most recent move (equivalent to determining the current board position).
7)  Find out how to disable / discard a click on an illegal piece (eg. click on empty square or white piece if it's black's more).
8)  Store 3 chess positions in a database
9)  Retrieve a random chess position from the database and display it.



Done: 1)  What are the specs for a chess position string?
Done: 2)  Take a position from the web page (via a text box), and have that position displayed on the board.

-->


<style>

#table1 {
    width:70%; 
    left:15%; 
    right:15%;
  }

#center{
	
	position: relative;
	left: 15%;
}
#center2{
position: relative;
left:28%
}

</style>
<!--<base href = "localhost/"/>-->
<base href = "/../>
  <script type="text/javascript" ></script>
  <script src="js/chessboard-0.3.0.js"></script>
  <script src="http://chessboardjs.com/js/json3.min.js"></script>
  <script src="http://chessboardjs.com/js/jquery-1.10.1.min.js"></script>
  <script src="http://chessboardjs.com/js/chess.js"></script>
  <!--<base href="C:/Apache24/htdocs/" />--!>
<!--<base href="http://chessboardjs.com/" />--!>
  
  <meta name="viewport" content="width=device-width">
  <link rel="stylesheet" href="http://chessboardjs.com/css/normalize-2.1.2.min.css" />
  <link rel="stylesheet" href="http://chessboardjs.com/css/foundation-3.2.5.min.css" />
  <link rel="stylesheet" href="http://fonts.googleapis.com/css?family=Open+Sans:regular,semibold|Droid+Sans+Mono" />
  <link rel="stylesheet" href="http://chessboardjs.com/css/site.css" />
  <link rel="stylesheet" href="http://chessboardjs.com/css/chessboard.css" />




  <body>


<!--<font size = 7>

Welcome to Practicing Chess Endgames! 
</font>


<font size = 5>
<p>
This is a website where you can practice and improve your endgame tactics. Prepare to learn!

</font>
</p>
--!>
<!--
<p>Status: <span id="status"></span></p>
//<p>FEN: <span id="fen"></span></p>
//<p>PGN: <span id="pgn"></span></p>
-->
<table border=2 style="border: black 1px solid;  height:20px; width: 100%">



</td>
<td colspan = "1" style = "background-color:black; width:70%; text-align:center">

<img src = "img\chesspieces\wikipedia\wP.png" style = "width: 35px; text-align:center" ></img>
<img src = "img\chesspieces\wikipedia\wN.png" style = "width: 35px; text-align:center" ></img>
<img src = "img\chesspieces\wikipedia\wB.png" style = "width: 35px; text-align:center" ></img>
<img src = "img\chesspieces\wikipedia\wR.png" style = "width: 35px; text-align:center" ></img>
<img src = "img\chesspieces\wikipedia\wK.png" style = "width: 35px; text-align:center" ></img>
<img src = "img\chesspieces\wikipedia\wQ.png" style = "width: 35px;text-align:center" ></img>




</td>


</table>



<div id = "center">

<table  border=2 style="  height:440px; width: 70%" >
<tr>
<!-- <td colspan = "1" style = "width: 15%"></td> --!>
<td colspan = "3" style = "background-color:#388E8E;text-align:center">
<h1>
<font color = "white">
Welcome to Practicing Chess Endgames
</font>
</h1>

<!--<td colspan = "1" style = "background-color:#F4F4F4; width: 15%"></td>--!>





<font color = "white">
This is a website where you can practice and improve your endgame tactics. Prepare to learn!
</font>

</td>
</tr>
<tr>
<td colspan = "1" style = "background-color: #43CD80 ">



<div id="board2" style= "width: 450px;text-align:center;border: #43CD80 6px solid" ></div>

</td>
<td colspan = "2" style = "background-color: #43CD80 ">
<input type = "image" id = "getPosFrom" value = "Get a New Position" onClick = "setPosPressed();return false;" src = "img\poss.png" style = "width:200px; height: 50px; margin-top: 7px">
<input type = "image" id = "getHint" value = "Get Hint" onClick = "hint();return false;" src = "img\help.png" style = "width:200px; height: 50px; margin-top: 7px; margin-left: 27px">




<div>
Board position:

<div id= "tdBoardPos" contentEditable=true colspan= "3"></div>

Possible Moves:
<div id= "tdBoardPos2" contentEditable=true colspan= "3"></div>
</div>
</td>
</tr>


</table>


<script type="text/javascript" src="http://www.apronus.com/chess/playboard.js"></script>
<?php 
$mysqli = new mysqli("localhost", "root", "inet4By4", "chess");
if ($mysqli->connect_errno) {
    printf("Connect failed: %s\n", $mysqli->connect_error);
    exit();
}
$sql="SELECT * FROM pos";
$result=mysqli_query($mysqli,$sql);


$username_array = array();
$id = 0;
while($row = mysqli_fetch_array($result, MYSQLI_BOTH)){ // cycle through each record returned
  	//echo $row['position'];
	$position_array[] = $row['position']; 
	$solution_array[] = $row['solution'];
	$response_array[] = $row['response'];
	$hint_array[] = $row['hint'];
	
	
}
//echo $username_array[0];
//$username_string = implode(",", $username_array); 

//printf ("%s \n", $row[1]);
//$randint = rand(0,1);
//echo $randint;
//$row2 = (string)$username_array[$randint];
//echo $row2;
    /* free result set */
    $result->close();


?>

<script type="text/javascript">



var id;
var moveNum = 0;
var game = new Chess();
var statusEl = $('#status'),
  fenEl = $('#fen'),
  pgnEl = $('#pgn');

function setPosPressed() {
id = Math.floor(Math.random() * 10);
var xdata = <?php echo json_encode($position_array); ?>;
poop = xdata[id];
document.getElementById('tdBoardPos').innerHTML= poop;
board2.position(poop, false);
game.load(poop);
}

function hint() {
var hints = <?php echo json_encode($hint_array); ?>;
var currHint = hints[id];
document.getElementById('tdBoardPos2').innerHTML = currHint;
}

function getNextMove() {

var xxdata = <?php echo json_encode($solution_array); ?>;
var xxxdata = <?php echo json_encode($response_array); ?>;


var fenPos = game.fen();
fenPos = fenPos.split(' ');
//alert(xxdata);

var xxdatasplit = xxdata[id].split(' ');
alert(xxdatasplit);

var xxxdatasplit = xxxdata[id].split(' ');
alert(xxdatasplit[moveNum]);
alert(fenPos[0]);
if(moveNum == xxxdatasplit.length)
{
alert("good job move on!");
moveNum = 0;
setPosPressed();

}

if(fenPos[0] == xxdatasplit[moveNum]) {

game.move(xxxdatasplit[moveNum]);
moveNum++;
updateStatus();
}
else {
alert("Try again!");
board2.position(oldPos);
}

}


var makeRandomMove = function() {
  var possibleMoves = game.moves();
    if (possibleMoves.length === 0) return;
  
    var randomIndex = Math.floor(Math.random() * possibleMoves.length);
  game.move(possibleMoves[randomIndex]);
  board2.position(game.fen());
  };


function getCookie(cname) {
  var name = cname + "=";
  //alert(name)
  var ca = document.cookie.split(';');
 // alert(ca)
  for(var i=0; i<ca.length; i++)
    {
    var c = ca[i].trim();
    //alert(c)
    //.trim();

    if (c.indexOf(name)==0)
    return c.substring(name.length,c.length);
    }
  return "";

  } 

//var onChange = function(oldPos, newPos) {
  
//  document.getElementById('tdBoardPos').innerHTML=  ChessBoard.objToFen(newPos);
//  document.cookie = "name= " + board2.fen() + ";expires= Sat, 25 Jan 2014 12:47:11 UTC; path=/";

//};

var onDrop = function(source, target, piece, newPos, oldPos, orientation) {
  var move = game.move({
      from: source,
      to: target,
      promotion: 'q' 
    });

    if (move === null) return 'snapback';
//    board2.position(game.fen(), false);
//  window.setTimeout(makeRandomMove, 250);
 updateStatus();
//    alert(game.pgn());

//var xxdata = <?php echo json_encode($solution_array); ?>;
if(game.in_checkmate() == true)
{
alert("good job! move on to the next one!");
moveNum = 0;
setPosPressed();
}
//var xxdataArray = xxdata.split(' ');

//getNextMove();

var xxdata = <?php echo json_encode($solution_array); ?>;
var xxxdata = <?php echo json_encode($response_array); ?>;


var fenPos = game.fen();
fenPos = fenPos.split(' ');
//alert(xxdata);

var xxdatasplit = xxdata[id].split(' ');
//alert(xxdatasplit);

var xxxdatasplit = xxxdata[id].split(' ');
//alert(xxdatasplit[moveNum]);
//alert(fenPos[0]);
if(moveNum == xxxdatasplit.length)
{
alert("good job move on!");
moveNum = 0;
setPosPressed();

}
//alert(fenPos[0]);
//alert(xxdatasplit[moveNum]);

if(fenPos[0] == xxdatasplit[moveNum]) {

game.move(xxxdatasplit[moveNum]);
moveNum++;
updateStatus();
}
//else {
//alert("That is incorrect. How about we try an easier one!");
//setPosPressed();
//board2.position(oldPos);
//game.load(oldPos);
//alert(game.fen());
//game.turn() = 'w';
//}







};

var onDragStart = function(source, piece, position, orientation) {
  if (game.in_checkmate() === true || game.in_draw() === true ||
    piece.search(/^b/) !== -1) {
    return false;
  }
};
var onSnapEnd = function() {
  board2.position(game.fen());
};

var updateStatus = function() {
  var status = '';
board2.position(game.fen(), false);

  var moveColor = 'White';
  if (game.turn() === 'b') {
    moveColor = 'Black';
  }

  // checkmate?
  if (game.in_checkmate() === true) {
    status = 'Game over, ' + moveColor + ' is in checkmate.';
    
  }

  // draw?
  else if (game.in_draw() === true) {
    status = 'Game over, drawn position';
  }

  // game still on
  else {
    status = moveColor + ' to move';

    // check?
    if (game.in_check() === true) {
      status += ', ' + moveColor + ' is in check';
    }
  }

  statusEl.html(status);
  fenEl.html(game.fen());
  pgnEl.html(game.pgn());
};


var cfg = {

  position: 'start',
  draggable: true,
 // onChange: onChange,
  onDrop: onDrop,
  onDragStart: onDragStart,
  onSnapEnd: onSnapEnd
};


var board2 = new ChessBoard('board2', cfg);
updateStatus();

//  alert("startboard");
//  var board2 = new ChessBoard('board2', {
//   draggable: true,
//    dropOffBoard: 'trash',
//    sparePieces: true
// });

$('getPosFrom').on('click', setPosPressed());
//$('getHint').on('click', hint());


</script></p>

</body></html>

